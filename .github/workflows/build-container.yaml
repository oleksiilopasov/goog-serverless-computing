name: Build and publish to Artifact Registry

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
  workflow_dispatch:

jobs:
  setup-build-publish:
    name: Setup, Build and Publish
    runs-on: ubuntu-latest
    environment: development

    permissions:
      contents: read
      id-token: write

    env:
      ARTIFACT_REGISTRY_REPO: ${{ vars.ARTIFACT_REGISTRY_REPO }}
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}

    outputs:
      image_uri: ${{ steps.publish.outputs.image_uri }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Export GitHub short SHA
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      # Configure Workload Identity Federation and generate an access token.
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.IAM_SERVICE_ACCOUNT }}

      - name: Authorize Docker
        run: |-
          echo ${{ steps.auth.outputs.access_token }} | \
            docker login -u oauth2accesstoken --password-stdin https://$(echo $ARTIFACT_REGISTRY_REPO | awk -F '/' '{print $1}')

      # Build the Docker image
      - name: Build the Docker image
        run: |-
          docker build --no-cache \
            --tag $ARTIFACT_REGISTRY_REPO/$IMAGE_NAME:$SHORT_SHA .

      # Push the Docker image to Artifact Registry
      - name: Publish to the registry
        id: publish
        run: |-
          docker push $ARTIFACT_REGISTRY_REPO/$IMAGE_NAME:$SHORT_SHA && \
            echo "image_uri=$ARTIFACT_REGISTRY_REPO/$IMAGE_NAME:$SHORT_SHA" >> $GITHUB_OUTPUT

      # Push the Docker image to Artifact Registry as latest
      - name: Publish as latest
        run: |-
          docker tag $ARTIFACT_REGISTRY_REPO/$IMAGE_NAME:$SHORT_SHA $ARTIFACT_REGISTRY_REPO/$IMAGE_NAME:latest && \
            docker push $ARTIFACT_REGISTRY_REPO/$IMAGE_NAME:latest

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: setup-build-publish
    environment: development

    permissions:
      contents: read
      id-token: write

    env:
      DELIVERY_PIPELINE: ${{ vars.DELIVERY_PIPELINE }}
      LOCATION: ${{ vars.LOCATION }}
      IMAGE: ${{ needs.setup-build-publish.outputs.image_uri }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.IAM_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create release
        run: |-
          RELEASE_TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
          gcloud deploy releases create release-$RELEASE_TIMESTAMP \
            --region $LOCATION \
            --delivery-pipeline $DELIVERY_PIPELINE \
            --images "app=$IMAGE"
